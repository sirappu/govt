SET SERVEROUTPUT ON;

CREATE OR REPLACE TRIGGER TRIGGER_NAME
BEFORE DELETE OR INSERT OR UPDATE ON CUSTOMERS
FOR EACH ROW
WHEN (NEW.ID > 0)
DECLARE
    SALARY_DIFF NUMBER;
BEGIN
    SALARY_DIFF := :NEW.SALARY - :OLD.SALARY;
    DBMS_OUTPUT.PUT_LINE('OLD SALARY : '||:OLD.SALARY);
    DBMS_OUTPUT.PUT_LINE('NEW SALARY : '||:NEW.SALARY);
    DBMS_OUTPUT.PUT_LINE('SALARY DIFFERENCE : '||SALARY_DIFF);
END;
/

INSERT INTO CUSTOMERS
VALUES (7,'Kirti',22,'HP',7500.00);

UPDATE CUSTOMERS
    SET SALARY = SALARY + 1000
WHERE ID = 2;




--1
CREATE TABLE ORDER_TABLE(
    ORDER_ID NUMBER(5),
    QUANTITY NUMBER(4),
    COST_PER_ITEM NUMBER(6,2),
    TOTAL_COST NUMBER(8,2),
    CREATE_DATE TIMESTAMP,
    CREATED_BY VARCHAR2(10),
    CONSTRAINT ORDERS_PK PRIMARY KEY (ORDER_ID)
);


CREATE OR REPLACE TRIGGER INSERT_ORDER
BEFORE INSERT ON ORDER_TABLE
FOR EACH ROW
DECLARE
    USER_NAME VARCHAR2(20);
BEGIN

    SELECT USER
        INTO USER_NAME
    FROM DUAL;
    
    :NEW.CREATE_DATE := SYSDATE;
    :NEW.CREATED_BY := USER_NAME;
    
    DBMS_OUTPUT.PUT_LINE('TABLE MODIFIED BY : '||:NEW.CREATED_BY);
    DBMS_OUTPUT.PUT_LINE('DATE OF MODIFICATION : '||:NEW.CREATE_DATE||'
');
END;
/

INSERT INTO ORDER_TABLE
VALUES(1,2,70.9,500,TO_DATE('2024-09-29','YYYY-MM-DD'),'Ashwin');

INSERT INTO ORDER_TABLE
VALUES(2,9,80.75,200.3,NULL,NULL);



--2
CREATE OR REPLACE TRIGGER UPDATE_ORDER
BEFORE UPDATE ON ORDER_TABLE
FOR EACH ROW
DECLARE
    USER_NAME VARCHAR2(20);
BEGIN
    SELECT USER
        INTO USER_NAME
    FROM DUAL;
    
    :NEW.CREATE_DATE := SYSDATE;
    :NEW.CREATED_BY := USER_NAME;
    
    DBMS_OUTPUT.PUT_LINE('
RECORD UPDATED :');
    DBMS_OUTPUT.PUT_LINE('RECORD UPDATED BY : '||:NEW.CREATED_BY);
    DBMS_OUTPUT.PUT_LINE('RECORD UPDATED AT : '||:NEW.CREATE_DATE);
    
    
END UPDATE_ORDER;
/

UPDATE ORDER_TABLE
    SET COST_PER_ITEM = COST_PER_ITEM + 100;




--3

CREATE TABLE ORDER_TABLE2(
    ORDER_ID NUMBER(5),
    QUANTITY NUMBER(4),
    COST_PER_ITEM NUMBER(6,2),
    TOTAL_COST NUMBER(8,2),
    CONSTRAINT ORDER_TABLE2_PK PRIMARY KEY (ORDER_ID)
);

CREATE TABLE ORDER_AUDIT(
    ORDER_ID NUMBER(5),
    QUANTITY NUMBER(4),
    COST_PER_ITEM NUMBER(6,2),
    TOTAL_COST NUMBER(8,2),
    USER_NAME VARCHAR2(20)
);

CREATE OR REPLACE TRIGGER ORDER_INSERT_UPDATE
AFTER INSERT OR UPDATE ON ORDER_TABLE2
FOR EACH ROW
DECLARE
    USER_NAME VARCHAR2(20);
BEGIN
    SELECT USER
        INTO USER_NAME
    FROM DUAL;
    
    INSERT INTO ORDER_AUDIT
    VALUES(:NEW.ORDER_ID,:NEW.QUANTITY,:NEW.COST_PER_ITEM,:NEW.TOTAL_COST,USER_NAME);
    
END;
/


INSERT INTO ORDER_TABLE2
VALUES(1,2,70.9,500);

INSERT INTO ORDER_TABLE2
VALUES(2,9,35.75,207.44);

UPDATE ORDER_TABLE2
    SET QUANTITY = QUANTITY + 1
WHERE ORDER_ID = 2;


SELECT *
FROM ORDER_AUDIT;




--4
CREATE TABLE ORDER_AUDIT2(
    ORDER_ID NUMBER(5),
    QUANTITY NUMBER(4),
    COST_PER_ITEM NUMBER(6,2),
    TOTAL_COST NUMBER(8,2),
    DELETE_DATE TIMESTAMP,
    DELETED_BY VARCHAR2(20)
);

DROP TABLE ORDER_AUDIT2;

CREATE OR REPLACE TRIGGER ORDER_DELETE
BEFORE DELETE ON ORDER_TABLE2
FOR EACH ROW
DECLARE
    USER_NAME VARCHAR2(20);
BEGIN
    SELECT USER
        INTO USER_NAME
    FROM DUAL;
    
    INSERT INTO ORDER_AUDIT2
    VALUES(:OLD.ORDER_ID,:OLD.QUANTITY,:OLD.COST_PER_ITEM,:OLD.TOTAL_COST,SYSDATE,USER_NAME);
END;
/

DELETE FROM ORDER_TABLE2;

SELECT * 
FROM ORDER_AUDIT2;
/





DECLARE
PROCEDURE compare (value in varchar2, pattern in varchar2 ) is
BEGIN
 IF value LIKE pattern THEN
 dbms_output.put_line ('True');
 ELSE
 dbms_output.put_line ('False');
 END IF;
END;
BEGIN
 compare('Zara Ali', 'Z%A_i');
 compare('Nuha Ali', 'Z%A_i');
END;
/
